function make_rstan_model(loaddir,fname)
    
    load([loaddir '/model_data.mat']);
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % make .stan
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % whether transcriptome data is used or not
    is_exist_rna = isfield(out,'rna');
    
    % whether there are enzymes whose protein levels are inferred from
    % transcript levels or not
    is_exist_inferred_enz = isfield(out,'idx_p') && ~isempty(out.idx_p);
    if is_exist_inferred_enz
        num_inferred_enz = out.num_p;
    else
        num_inferred_enz = 0;
    end
    
    % whether effectors (cofactors, allosteric effectors, additional
    % substrates/products) exist or not
    is_exist_met_eff = ~isempty(out.met_eff_list_include);
    if is_exist_met_eff
        num_met_eff = out.num_met_eff;
    else
        num_met_eff = 0;
    end
    
    % whether there are metabolites whose amounts are inferred as
    % parameters
    is_exist_met_est = ~isempty(out.met_names_est);
    if is_exist_met_est
        num_met_est = out.num_met_est;
    else
        num_met_est = 0;
    end
    
    % whether there are enzymes as part of complexes
    is_exist_cmplx = ~isempty(out.enz_eff);
    if is_exist_cmplx
        num_enz_cmplx = out.num_enz_cmplx;
    else
        num_enz_cmplx = 0;
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    fid = fopen([loaddir '/' fname '.txt'],'w');
    
    %%%%%%%%%%% function block %%%%%%%%%%%
    fwrite(fid,['functions{' newline]);
    
    % calc_mu, calc_Sigma2, calc_log_prior
    prep_calc_mu(fid);
    prep_calc_Sigma2(fid);
    prep_calc_log_prior(fid);
    
    % calc_x
    prep_calc_x(fid,out,is_exist_met_eff,...
        is_exist_met_est,num_met_est);
    
    % prep_mu_vi_ref
    prep_prep_mu_vi_ref(fid,X);
    
    % prep_mean_v
    calc_prep_mean_v(fid);
    
    % prep_y
    % : this function exists only when transcriptpme data is used
    if is_exist_rna
        if is_exist_inferred_enz
            num_inferred_enz = length(out.idx_p);
            % prep_r_p_all
            % :this function exists only when some enzyme levels should be inferred 
            % from transcript levels
            prep_prep_r_p_all(fid,num_inferred_enz);
            prep_prep_y(fid,is_exist_inferred_enz,num_inferred_enz);
        else
            prep_prep_y(fid,is_exist_inferred_enz,0);
        end
    end

    % prep_met_est
    if is_exist_met_est
        num_met_est = out.num_met_est;
        prep_prep_met_est(fid,num_met_est);
    end
    
    fwrite(fid,['}' newline newline]);
    
    %%%%%%%%%%% data block %%%%%%%%%%%
    prep_data_block(fid,out);
    
    %%%%%%%%%%% parameters block %%%%%%%%%%%
    prep_param_block(fid,out,is_exist_rna,...
        is_exist_inferred_enz,...
        is_exist_met_eff,num_met_eff,...
        is_exist_met_est,num_met_est,...
        is_exist_cmplx,num_enz_cmplx);
    
    %%%%%%%%%%% transformed parameters block %%%%%%%%%%%
    prep_transformed_param_block(fid,...
        is_exist_rna,...
        is_exist_cmplx,...
        is_exist_inferred_enz,num_inferred_enz,...
        is_exist_met_eff,is_exist_met_est,num_met_est);
    
    %%%%%%%%%%% model block %%%%%%%%%%%
    prep_model_block(fid,is_exist_rna,...
        is_exist_cmplx,num_enz_cmplx,...
        is_exist_met_eff,...
        is_exist_inferred_enz,num_inferred_enz);
    
    %%%%%%%%%%% generated quantities block %%%%%%%%%%%
    prep_gen_quantities_block(fid,is_exist_rna,...
        is_exist_cmplx,num_enz_cmplx,...
        is_exist_met_eff,...
        is_exist_inferred_enz,num_inferred_enz);
    
    copyfile([loaddir '/' fname '.txt'],[loaddir '/' fname '.stan']);
    clear fid;
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % make initf
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    fid = fopen([loaddir '/' fname '_initf.txt'],'w');
    prep_initf(fid,out,init,...
        is_exist_met_eff,is_exist_rna,is_exist_inferred_enz,is_exist_met_est);
    
    copyfile([loaddir '/' fname '_initf.txt'],[loaddir '/' fname '_initf.R']);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % make mkdata
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    fid = fopen([loaddir '/' fname '_mkdata.txt'],'w');
    prep_mkdata(fid,out);
    
    copyfile([loaddir '/' fname '_mkdata.txt'],[loaddir '/' fname '_mkdata.R']);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
end

function prep_mkdata(fid,out)
    
    fwrite(fid,...
        ['mkdata_now <- function(load_dir,c_v,c_e,v_max,grp,pair){' newline...
        '  int_list_tmp <- mkdata_char(load_dir,"/int_list.txt")' newline...
        '  data = list(name = "dummy"']);
    
    out_fields = fieldnames(out);
    out_scalar_list_names = {};
    for i=1:length(out_fields)
       if  isscalar(getfield(out,out_fields{i})) && ...
               isnumeric(getfield(out,out_fields{i}))
          out_scalar_list_names = [out_scalar_list_names; out_fields{i}];
       end
    end
    
    for i=1:length(out_fields)
        f = getfield(out,out_fields{i});
        if ~ismember(out_fields{i},{'S_','is_include'}) && ~iscell(f) && ~isempty(f)
            if isscalar(f)
                fwrite(fid,[',' newline '              '...
                    out_fields{i} ' = as.integer(int_list_tmp[int_list_tmp[,1]=="'...
                    out_fields{i} '",2])']);
            elseif isvector(f)
                fwrite(fid,[',' newline '              '...
                    out_fields{i} ' = mkdata_vec(load_dir,"/' out_fields{i} '.txt")']);
            elseif ismatrix(f)
                fwrite(fid,[',' newline '              '...
                    out_fields{i} ' = mkdata(load_dir,"/' out_fields{i} '.txt")']);
            end
        end
    end
    fwrite(fid,[ newline ')' newline  '  return(data)' newline '}']);
    
end

function prep_initf(fid,out,init,...
        is_exist_met_eff,is_exist_rna,is_exist_inferred_enz,is_exist_met_est)
    
    fwrite(fid,...
        ['initf <- function(){' newline...
        '  list(']);
    % v
    fwrite(fid,...
        ['v=t(matrix(c('...
        strjoin(arrayfun(@num2str,init.mu_v,'UniformOutput',false),',')...
        '),' num2str(out.num_rc) ',' num2str(out.num_g) ')),' newline]);
    
    % mean of independent flux
    idx_fixed = out.idx_fixed;
    idx_const = max(find(out.Nu(idx_fixed,:)));
    fwrite(fid,...
        ['       mu_vi_wt_tmp=c('...
        strjoin(arrayfun(@num2str,init.mu_vi([1:idx_const-1,idx_const+1:end]),...
        'UniformOutput',false),',')...
        '),' newline]);
    
    if out.num_g==2
        fwrite(fid,...
            ['       mu_vi_g=c('...
            strjoin(arrayfun(@num2str,init.mu_vi,'UniformOutput',false),',')...
            '),']);
    else
        fwrite(fid,...
            ['       mu_vi_g=t(matrix(c('...
            strjoin(arrayfun(@num2str,init.mu_vi,'UniformOutput',false),',')...
            '),' num2str(out.num_ri) ',' num2str(out.num_g-1) ')),' newline]);
    end
    
    % elasticity coefficients
    fwrite(fid,...
        ['       a=rep(0.1,' num2str(out.num_rc) '),' newline...
        '       b=rep(0.1,' num2str(out.num_b) '),' newline]);
    if is_exist_met_eff
        fwrite(fid,...
            ['       e_effs=rep(0.1,' num2str(out.num_met_eff_pairs) '),' newline newline ]);
    end

    % error term and mRNA-to-protein ratios
    fwrite(fid,...
        ['       sigma_n=0.1,' newline]);
    if is_exist_rna
        fwrite(fid,...
            ['       sigma_n2=0.1,' newline...
            '       sigma_p=0.1,' newline]);
        if is_exist_inferred_enz
            fwrite(fid,...
                ['       r_p_tmp=rep(0,' num2str(out.num_rc-out.num_p) '),' newline...
                '       r_p=t(matrix(0,' num2str(out.num_rc) ',' num2str(out.num_g-1) '))']);
        else
            fwrite(fid,...
                ['       r_p=t(matrix(0,' num2str(out.num_rc) ',' num2str(out.num_g) '))']);
        end
    end
    
    if is_exist_met_est
        num_met_est = out.num_met_est;
        if num_met_est==1
            fwrite(fid,...
                [',' newline ...
                '       met_est=rep(1.0,' num2str(out.num_g-1) ')']);
        else
            fwrite(fid,...
                [',' newline ...
                '       met_est=matrix(1.0,'...
                num2str(num_met_est) ',' num2str(out.num_g-1) ')']);
        end
        
    end

    fwrite(fid,['       )' newline '}']);
    
end

function prep_gen_quantities_block(fid,is_exist_rna,...
        is_exist_cmplx,num_enz_cmplx,...
        is_exist_met_eff,...
        is_exist_inferred_enz,num_inferred_enz)
    
    fwrite(fid,[...
        'generated quantities{' newline...
        '  vector[num_smpl] log_lik[num_rc];' newline...
        '  real log_prior[num_g];' newline...
        '  vector[num_smpl] enz_pred[num_rc];' newline]);
    if is_exist_rna
       fwrite(fid,['  vector[num_smpl] rna_pred[num_rc];' newline]); 
    end
    fwrite(fid,['{' newline...
        '    vector[num_ri] mu_vi_ref;' newline newline...
        '    mu_vi_ref = prep_mu_vi_ref(mu_vi_wt_tmp,num_ri,Nu);' newline...
        '    log_prior[1] = calc_log_prior(mu_vi_ref,Nu,Ne,Sp,Sm,c_v,c_e,num_r,num_m,num_ri,num_mc,idx_calc,num_rc,v[1]);' newline...
        '    for(g in 2:num_g){' newline...
        '      log_prior[g] = calc_log_prior(mu_vi_g[g-1],Nu,Ne,Sp,Sm,c_v,c_e,num_r,num_m,num_ri,num_mc,idx_calc,num_rc,v[g]);' newline...
        '    }' newline newline]);
    
    fwrite(fid,[...
        '    for(g in 1:num_g){' newline...
        '      for(r in 1:num_rc){' newline...
        '        for(n in idx_g[g,1]:idx_g[g,2]){' newline]);
    str_inferred_enz = '          ';
    if is_exist_rna
        if is_exist_inferred_enz
            if num_inferred_enz==1
                str_inferred_enz = [str_inferred_enz...
                    ' if(r==idx_p){' newline...
                    '             log_lik[r][n] = normal_lpdf(rna[r][n] | y[r][n], sqrt(sigma_n2) );' newline...
                    '             }else'];
            elseif num_inferred_enz>1
                for i=1:num_inferred_enz
                    str_inferred_enz = [str_inferred_enz...
                        ' if(r==idx_p[' num2str(i) ']){' newline...
                        '             log_lik[r][n] = normal_lpdf(rna[r][n] | y[r][n], sqrt(sigma_n2) );' newline...
                        '             }else'];
                end
            end
        end
        str_cmplx = '';
        if is_exist_cmplx   
           elseif num_enz_cmplx>1
               for i=1:num_enz_cmplx
                   str_cmplx =  [str_cmplx...
                       ' if(r==idx_cmplx[' num2str(i) '){' newline...
                       '             log_lik[r][n] = normal_lpdf(rna_eff[idx_cmplx[' num2str(i) '][n] | y_eff[' num2str(i) '], sqrt(sigma_n2) );' newline...
                       '                           + normal_lpdf(rna_eff[r][n] | y[r][n], sqrt(sigma_n2) ))'...
                       '                           + normal_lpdf(enz[idx_cmplx[' num2str(i) '] .* enz_eff[' num2str(i) '] | v[g][r]*x[r][n],sqrt(sigma_n));'...
                       '             }else'];
               end
        end
        str_others = [...
            ' {' newline...
            '             log_lik[r][n] = normal_lpdf(enz[r] | v[g][r]*x[r][n], sqrt(sigma_n) )' newline...
            '                           + normal_lpdf(rna[r] | y[r], sqrt(sigma_n2));' newline...
            '             }' newline];
        
    else
        str_cmplx = '';
        if is_exist_cmplx
            for i=1:num_enz_cmplx
               str_cmplx =  [str_cmplx...
                   'if(r==idx_cmplx[' num2str(i) '){' newline...
                   '             log_lik[r][n] =  normal_lpdf(enz[idx_cmplx[' num2str(i) '] .* enz_eff[' num2str(i) '] | v[g][r]*x[r][n],sqrt(sigma_n));' newline];
            end
        end
        str_others = [...
            ' {' newline...
            '             log_lik[r][n] = normal_lpdf(enz[r] | v[g][r]*x[r][n], sqrt(sigma_n) );' newline...
            '             }' newline];
        
    end
    fwrite(fid,[str_inferred_enz,str_cmplx,str_others newline]);
    
    
    fwrite(fid,...
        ['          enz_pred[r][n] = normal_rng(v[g][r]*x[r][n], sqrt(sigma_n));' newline,...
        '          rna_pred[r][n] = normal_rng(y[r][n], sqrt(sigma_n2));' newline...
        '    }' newline '   }' newline '  }' newline '  }' newline '}' newline]);
    
end

function prep_model_block(fid,is_exist_rna,...
        is_exist_cmplx,num_enz_cmplx,...
        is_exist_met_eff,...
        is_exist_inferred_enz,num_inferred_enz)
    
    fwrite(fid,[...
        'model{' newline...
        '  vector[num_smpl] v_x[num_rc];' newline...
        '  vector[num_ri] mu_vi_ref;' newline...
        '  ' newline...
        '  for(r in 1:num_rc){' newline...
        '    for(g in 1:num_g){' newline...
        '      v_x[r][idx_g[g,1]:idx_g[g,2]] = v[g][r] * x[r][idx_g[g,1]:idx_g[g,2]];' newline...
        '    }' newline...
        '  }' newline newline]);
    
    fwrite(fid,['  for(r in 1:num_rc){' newline]);
    str_inferred_enz = '     ';
    if is_exist_rna
        if is_exist_inferred_enz
            if num_inferred_enz==1
                str_inferred_enz = [str_inferred_enz...
                    ' if(r==idx_p){' newline...
                    '        target += normal_lpdf(rna[r] | y[r], sqrt(sigma_n2) );' newline...
                    '      }else'];
            elseif num_inferred_enz>1
                for i=1:num_inferred_enz
                    str_inferred_enz = [str_inferred_enz...
                        ' if(r==idx_p[' num2str(i) ']){' newline...
                        '        target += normal_lpdf(rna[r] | y[r], sqrt(sigma_n2) );' newline...
                        '      }else'];
                end
            end
        end
        str_cmplx = '';
        if is_exist_cmplx   
           elseif num_enz_cmplx>1
               for i=1:num_enz_cmplx
                   str_cmplx =  [str_cmplx...
                       ' if(r==idx_cmplx[' num2str(i) '){' newline...
                       '        target += normal_lpdf(rna_eff[idx_cmplx[' num2str(i) '] | y_eff[' num2str(i) '], sqrt(sigma_n2) );' newline...
                       '      }else'];
               end
        end
        str_others = [...
            ' {' newline...
            '        target += normal_lpdf(enz[r] | v_x[r], sqrt(sigma_n) );' newline...
            '        target += normal_lpdf(rna[r] | y[r], sqrt(sigma_n2));' newline...
            '      }' newline];
    else
        str_cmplx = '';
        if is_exist_cmplx
            for i=1:num_enz_cmplx
               str_cmplx =  [str_cmplx...
                   'if(r==idx_cmplx[' num2str(i) '){' newline...
                   '        target += normal_lpdf(enz[idx_cmplx[' num2str(i) '] .* enz_eff[' num2str(i) '] |'...
                   ' v_x[idx_cmplx[' num2str(i) '], sqrt(sigma_n) );' newline];
            end
        end
        str_others = [...
            ' {' newline...
            '        target += normal_lpdf(enz[r] | v_x[r], sqrt(sigma_n) );' newline...
            '      }' newline];
    end
    fwrite(fid,[str_inferred_enz,str_cmplx,str_others,...
        '  }' newline newline]);
    
    if is_exist_rna
        fwrite(fid,['  for(g in 1:num_g){' newline]);
        if is_exist_inferred_enz
            fwrite(fid,[...
                '    if(g != num_g){' newline...
                '      target += normal_lpdf(r_p[g]|0,sigma_p);' newline...
                '    }else{' newline...
                '      for(i in 1:num_p){' newline...
                '        target += normal_lpdf(r_p_tmp[i]|0,sigma_p);' newline...
                '      }' newline...
                '    }' newline]);
        else
            fwrite(fid,['    target += normal_lpdf(r_p[g]|0,sigma_p);' newline]);
        end
        if is_exist_cmplx
            fwrite(fid,['    target += normal_lpdf(r_p_eff[g]|0,sigma_p);' newline]);
        end
        fwrite(fid,['  }' newline newline]);
    end
    
    fwrite(fid,...
        ['  mu_vi_ref = prep_mu_vi_ref(mu_vi_wt_tmp,num_ri,Nu);' newline...
        '   target += calc_log_prior(mu_vi_ref,Nu,Ne,Sp,Sm,c_v,c_e,num_r,num_m,num_ri,num_mc,idx_calc,num_rc,v[1]);' newline...
        '  for(g in 2:num_g){' newline...
        '    target += calc_log_prior(mu_vi_g[g-1],Nu,Ne,Sp,Sm,c_v,c_e,num_r,num_m,num_ri,num_mc,idx_calc,num_rc,v[g]);' newline...
        '  }' newline newline]);
    
    fwrite(fid,[...
        '  target += normal_lpdf(a|0,1);' newline...
        '  target += normal_lpdf(b|0,1);' newline]);
    if is_exist_met_eff
        fwrite(fid,['  target += normal_lpdf(e_effs|0,1);' newline]);
    end
    fwrite(fid,['  target += cauchy_lpdf(sigma_n|0,0.5);' newline]);
    if is_exist_rna
        fwrite(fid,[...
            '  target += cauchy_lpdf(sigma_p|0,0.5);' newline...
            '  target += cauchy_lpdf(sigma_n2|0,0.5);' newline]);
    end

    fwrite(fid,['  ' newline...
        '}' newline]);
end

function prep_transformed_param_block(fid,...
        is_exist_rna,...
        is_exist_cmplx,...
        is_exist_inferred_enz,num_inferred_enz,...
        is_exist_met_eff,is_exist_met_est,num_met_est)
    
    fwrite(fid,[...
        'transformed parameters{' newline...
        '  vector[num_smpl] x[num_rc];' newline]);
    if is_exist_rna
        fwrite(fid,['  vector<lower=0>[num_smpl] y[num_rc];' newline]);
        if is_exist_cmplx
            fwrite(fid,['  vector<lower=0>[num_smpl] y_eff[num_enz_cmplx];' newline]);
        end
    end
    
    fwrite(fid,[...
        '  {' newline...
        '      real b2[num_rc]  = rep_array(0.0,num_rc);' newline...
        '      vector[num_rc] mean_v;' newline]);
    if is_exist_met_est
       fwrite(fid,['      vector[num_smpl] c_out[num_met_est];' newline]); 
    end
    if is_exist_rna
        fwrite(fid,['      vector[num_smpl] v_x[num_rc];' newline]); 
    end
        
    fwrite(fid,[newline...
        '      mean_v = prep_mean_v(mu_vi_wt_tmp,mu_vi_g,num_r,num_ri,num_rc,num_g,Nu,idx_calc,idx_g);' newline...
        '      b2[idx_b] = b;' newline]);
    
    if is_exist_rna
        if is_exist_cmplx
            fwrite(fid,[...
                '      for(g in 1:num_g){' newline...
                '        for(i in 1:num_cmplx){' newline...
                '          y_eff[i][idx_g[g,1]:idx_g[g,2]] = enz_eff[i][idx_g[g,1]:idx_g[g,2]] ./ (1+r_p_eff[i][g]);' newline...
                '        }' newline...
                '      }' newline newline]);
        end
    end
    
    if is_exist_met_est
        fwrite(fid,['      c_out = prep_met_est(met_est,idx_g,num_g,num_smpl,num_met_est);' newline]);
    end
    
    fwrite(fid,'      x = calc_x(mean_v,sub,pro,a,b2,');
    if is_exist_met_eff
        fwrite(fid,'met_eff,e_effs,');
    end
    if is_exist_met_est
        fwrite(fid,'c_out,');
    end
    fwrite(fid,['num_rc,num_smpl);' newline newline]);
    
    if is_exist_rna
       fwrite(fid,[...
           '      for(r in 1:num_rc){' newline...
           '        for(g in 1:num_g){' newline...
           '          v_x[r][idx_g[g,1]:idx_g[g,2]] = v[g][r] * x[r][idx_g[g,1]:idx_g[g,2]];' newline...
           '        }' newline...
           '      }' newline]);
        if is_exist_inferred_enz
           fwrite(fid,['     y = prep_y(r_p,r_p_tmp,rna,v_x,idx_g,idx_p,idx_p_,num_g,num_rc,num_p);' newline]);
        else
            fwrite(fid,['     y = prep_y(r_p,rna,v_x,idx_g,num_g,num_rc);' newline]);            
        end
    end
    
    fwrite(fid,['  }' newline '}' newline newline]);
    
end

function prep_param_block(fid,out,is_exist_rna,...
        is_exist_inferred_enz,...
        is_exist_met_eff,num_met_eff,...
        is_exist_met_est,num_met_est,...
        is_exist_cmplx,num_enz_cmplx)
    
    fwrite(fid,['parameters{' newline...
        '    vector[num_rc] v[num_g];// flux' newline...
        '    real<lower=0> a[num_rc];// elasticity coefficient for substrate' newline...
        '    real<lower=0> b[num_b];// elasticity coefficient for products' newline...
        '    vector<lower=-v_max,upper=v_max>[' num2str(out.num_ri_wt) '] mu_vi_wt_tmp;' newline...
        '    vector<lower=-v_max,upper=v_max>[num_ri] mu_vi_g[num_g-1];// mu_vi for other group' newline...
        '    real<lower=0> sigma_n;// error term for likelihood of enzymes' newline newline...
        ]);
    
    if is_exist_rna
        fwrite(fid,['    real<lower=0> sigma_p;' newline...
            '    real<lower=0> sigma_n2;' newline]);
        if is_exist_inferred_enz
            fwrite(fid,['    vector[num_rc] r_p[num_g-1];' newline...
                '    vector[num_rc-num_p] r_p_tmp;' newline]);
        else
            fwrite(fid,['    vector[num_rc] r_p[num_g];' newline]);
        end
    end
    
    if is_exist_met_eff
       fwrite(fid,['    real<lower=0> e_effs[num_met_eff_pairs];// elasticity coefficient for effectors (cofactors and allosteric effectors)' newline]); 
    end
    
    if is_exist_met_est
        if num_met_est==1
            fwrite(fid,['    real<lower=0,upper=4> met_est[num_g-1];' newline]);
        elseif num_met_est>1
            fwrite(fid,['    vector<lower=0,upper=4>[num_g-1] met_est[num_met_est];' newline]);
        end
    end
    
    if is_exist_cmplx
%         if num_enz_cmplx==1
%             fwrite(fid,['    real r_p_eff[num_g];' newline]);
%         elseif num_enz_cmplx>1
            fwrite(fid,['    vector[num_enz_cmplx] r_p_eff[num_g];' newline]);
%         end
    end
    fwrite(fid,['}' newline newline]);
end

function prep_data_block(fid,out)
    
    fwrite(fid,['data{' newline]);
    
    out_fields = fieldnames(out);
    out_scalar_list = [];
    out_scalar_list_names = {};
    for i=1:length(out_fields)
       if  isscalar(getfield(out,out_fields{i})) && ...
               isnumeric(getfield(out,out_fields{i}))
          out_scalar_list = [out_scalar_list; getfield(out,out_fields{i})];
          out_scalar_list_names = [out_scalar_list_names; out_fields{i}];
       end
    end
    
    for i=1:length(out_fields)
        f = getfield(out,out_fields{i});
        if ~ismember(out_fields{i},{'S_','is_include'}) && ~iscell(f) && ~isempty(f)
            if isscalar(f)
                fwrite(fid,['    int<lower=0> ' out_fields{i} ';' newline]);
            elseif isvector(f)
                if strcmp(out_fields{i},'idx_p_')
                    str_dim1 = {'num_rc-num_p'};
                elseif strcmp(out_fields{i},'idx_irrev')
                    str_dim1 = {'num_rc-num_b'};
                else
                    str_dim1 = out_scalar_list_names(out_scalar_list == length(f));
                end
                fwrite(fid,['    int ' out_fields{i} '[' str_dim1{1} '];' newline]);
            elseif ismatrix(f)
                str_dim1 = out_scalar_list_names(out_scalar_list == size(f,1));
                str_dim2 = out_scalar_list_names(out_scalar_list == size(f,2));
                if strcmp(out_fields{i},'idx_g')
                    fwrite(fid,['    int ' out_fields{i} '[' str_dim1{1} ',2];' newline]);
                elseif contains(out_fields{i},{'enz','sub','pro','rna','enz_eff','rna_eff','met_eff'})
                    fwrite(fid,['    vector[' str_dim2{1} '] ' out_fields{i} '[' str_dim1{1} '];' newline]);
                else
                    fwrite(fid,['    matrix[' str_dim1{1} ',' str_dim2{1} '] ' out_fields{i} ';' newline]);
                end
            end
        end
    end
    fwrite(fid,['    real<lower=0,upper=1> c_v;' newline...
        '    real<lower=0,upper=1> c_e;' newline...
        '    int v_max;' newline]);
    fwrite(fid,['}' newline newline]);
    
end

function prep_prep_mu_vi_ref(fid,X)
   
    fwrite(fid,[...
        '  vector prep_mu_vi_ref(vector mu_vi_wt_tmp,int num_ri, matrix Nu){' newline...
        '    vector[num_ri] mu_vi_ref = rep_vector(0,num_ri);' newline]);
    idx_fixed = X.idx.idx_fixed_all;
    idx_const = max(find(X.ker.Nu(idx_fixed,:)));
    j = 1;
    for i=1:X.num.num_indflux
       if i==idx_const && idx_const==1
           j=2;
       elseif i==idx_const && i>2
           fwrite(fid,['    mu_vi_ref[' num2str(j) ':' num2str(i-1)...
               '] = mu_vi_wt_tmp[' num2str(j) ':' num2str(i-1) '];' newline]);
           j = idx_const+1;
       elseif i==idx_const && i==2
           fwrite(fid,['    mu_vi_ref[1] = mu_vi_wt_tmp[1];' newline]);
           j = 3;
       elseif i==X.num.num_indflux && i-1==X.num.num_ri_wt && j==X.num.num_indflux
           fwrite(fid,['    mu_vi_ref[' num2str(j)...
               '] = mu_vi_wt_tmp[' num2str(j-1) '];' newline]);
       elseif i==X.num.num_indflux && i-1==X.num.num_ri_wt
           fwrite(fid,['    mu_vi_ref[' num2str(j) ':' num2str(i)...
               '] = mu_vi_wt_tmp[' num2str(j-1) ':' num2str(i-1) '];' newline]);
       end
    end
    fwrite(fid,['    mu_vi_ref[' num2str(idx_const) '] = 1-Nu[' num2str(idx_fixed) ',]*mu_vi_ref;' newline]);  
    fwrite(fid,['    return mu_vi_ref;' newline ' }' newline]);
    
end

function prep_calc_x(fid,out,is_exist_met_eff,...
        is_exist_met_est,num_met_est)
    
    fwrite(fid,['  vector[] calc_x(vector mean_v,vector[] sub,vector[] pro,' newline]);
    fwrite(fid,['                real[] a,real[] b,' newline]);
    if is_exist_met_eff
        fwrite(fid,['                vector[] met_eff,real[] e_effs,' newline]);
    end
    if is_exist_met_est
       if num_met_est==1
           fwrite(fid,['                vector met_est,' newline]);
       elseif num_met_est>1
           fwrite(fid,['                vector[] met_est,' newline]);
       end
    end
    fwrite(fid,['                int num_rc,int num_s){' newline...
        '    vector[num_s] x[num_rc];' newline...
        '    vector[num_s] ones = rep_vector(1.0,num_s);' newline newline]);
    
    cnt_eff = 0;
    cnt_est = 0;
    for i=1:out.num_rc
        % additional substrates and products
        % cofactors and allosteric effectors
        str_met_effs = '';
        if is_exist_met_eff
            idx_met_effs = find(ismember(out.met_eff_list_include(:,2),out.rxn_names_include{i}));
            if ~isempty(idx_met_effs)
                sign_met_effs = out.met_eff_list_include(idx_met_effs,3);
                str_met_effs = [newline '          '];
                for ii=1:length(idx_met_effs)
                    cnt_eff = cnt_eff+1;
                    idx_now = find(ismember(out.met_names_eff,out.met_eff_list_include(idx_met_effs(ii),1)));
                   str_met_effs = [str_met_effs...
                       sign_met_effs{ii}(1) 'e_effs[' num2str(cnt_eff) ']*met_eff['...
                       num2str(num2str(idx_now)) ']']; 
                end
            end
        end
        str_sub = ['sub[' num2str(i) ']' ];
        str_pro = ['pro[' num2str(i) ']' ];
        if is_exist_met_est
            is_est_all = ismember(out.met_est_list(:,2),out.rxn_names_include{i});
            if any(is_est_all)
                idx_est = find(is_est_all);
                for j=1:length(idx_est)
                    is_est = idx_est(j);
                    if strcmp(out.met_est_list(is_est,3),'substrate')
                        cnt_est = cnt_est+1;
                        idx_now = find(ismember(out.met_names_est,out.met_est_list(is_est,1)));
                        str_sub = ['met_est[' num2str(idx_now) ']'];
                    elseif strcmp(out.met_est_list(is_est,3),'product')
                        cnt_est = cnt_est+1;
                        idx_now = find(ismember(out.met_names_est,out.met_est_list(is_est,1)));
                        str_pro = ['met_est[' num2str(idx_now) ']'];
                    elseif strcmp(out.met_est_list(is_est,3),'+')
                        cnt_est = cnt_est+1;
                        idx_now = find(ismember(out.met_names_est,out.met_est_list(is_est,1)));
                        str_met_effs = ['+e_effs[' num2str(cnt_est) ']*met_est[' num2str(idx_now) ']'];
                    elseif strcmp(out.met_est_list(is_est,3),'-')
                        cnt_est = cnt_est+1;
                        idx_now = find(ismember(out.met_names_est,out.met_est_list(is_est,1)));
                        str_met_effs = ['-e_effs[' num2str(cnt_est) ']*met_est[' num2str(idx_now) ']'];

                    end
                end
            end
        end
       fwrite(fid,['    // ' out.rxn_names_include{i} newline ...
           '    x[' num2str(i) '] = ones ./(mean_v[' num2str(i) ']*(1+'...
           'a[' num2str(i) ']*' str_sub '-b[' num2str(i) ']*' str_pro...
           str_met_effs '));'  newline]); 
    end
    if is_exist_met_eff
        assert(cnt_eff == size(out.met_eff_list_include,1));
    end
    if is_exist_met_est
        assert(cnt_est == size(out.met_est_list,1));
    end
    fwrite(fid,['    return x;' newline ' }' newline]);
    
    
end

function prep_prep_met_est(fid,num_met_est)
    
    if num_met_est==1
        fwrite(fid,['  vector[] prep_met_est(real[] c_input,int[,] idx_g,int num_g,int num_smpl,int num_met_est){' newline...
            '    real c_out[num_smpl];' newline...
            '    real sum_c = 0.0;' newline newline...
            '    for(g in 1:(num_g-1)){' newline...
            '      sum_c += c_input[g]*(idx_g[g,2]-idx_g[g,1]+1);' newline...
            '      c_out[idx_g[g,1]:idx_g[g,2]] = rep_vector(log(c_input[g]),idx_g[g,2]-idx_g[g,1]+1);'
            '    }' newline...
            '    c_out[idx_g[num_g,1]:idx_g[num_g,2]] = rep_vector(log((num_smpl-sum_c)/(idx_g[num_g,2]-idx_g[num_g,1]+1)),'...
            'idx_g[num_g,2]-idx_g[num_g,1]+1);' newline...
            '    }' newline...
            '    return c_out;' newline...
            '  }' newline]);
        
    elseif num_met_est>1
        fwrite(fid,['  vector[] prep_met_est(vector[] c_input,int[,] idx_g,'...
            'int num_g,int num_smpl,int num_met_est){' newline...
            '    vector[num_smpl] c_out[num_met_est];' newline...
            '    real sum_c[num_met_est] = rep_array(0.0,num_met_est);' newline newline...
            '    for(g in 1:(num_g-1)){' newline...
            '      for(c in 1:num_met_est){' newline...
            '        sum_c[c] += c_input[c][g]*(idx_g[g,2]-idx_g[g,1]+1);' newline...
            '        c_out[c][idx_g[g,1]:idx_g[g,2]] = rep_vector(log(c_input[c][g]),idx_g[g,2]-idx_g[g,1]+1);' newline...
            '      }' newline...
            '    }' newline...
            '    for(c in 1:num_met_est){' newline...
            '      c_out[c][idx_g[num_g,1]:idx_g[num_g,2]] = rep_vector(log((num_smpl-sum_c[c])/(idx_g[num_g,2]-idx_g[num_g,1]+1)),'...
            'idx_g[num_g,2]-idx_g[num_g,1]+1);' newline...
            '    }' newline...
            '    return c_out;' newline...
            '  }' newline]);
    end
    
end

function prep_prep_y(fid,is_exist_inferred_enz,num_inferred_enz)
   
    if is_exist_inferred_enz
        if num_inferred_enz==1
            fwrite(fid,['  vector[] prep_y(vector[] r_p,vector r_p_tmp, vector[] rna,vector[] v_x,' newline...
                '                  int[,] idx_g,int idx_p,int[] idx_p_,int num_g,int num_rc,int num_p){' newline]);
        elseif num_inferred_enz>1
            fwrite(fid,['  vector[] prep_y(vector[] r_p,vector r_p_tmp, vector[] rna,vector[] v_x,' newline...
                '                  int[,] idx_g,int[] idx_p,int[] idx_p_,int num_g,int num_rc,int num_p){' newline]);
        end
        fwrite(fid,['    vector[idx_g[num_g,2]] y[num_rc];' newline...
                '    vector[num_rc] r_p_all[num_g];' newline newline...
                '    r_p_all = prep_r_p_all(r_p,r_p_tmp,num_rc,num_g,num_p,'...
                'idx_p,idx_p_,idx_g,rna);' newline...
                '    for(g in 1:num_g){' newline...
                '      for(r in 1:num_rc){' newline...
                '        y[r][idx_g[g,1]:idx_g[g,2]] = v_x[r][idx_g[g,1]:idx_g[g,2]] ./ (1+r_p_all[g][r]);' newline...
                '      }' newline...
                '    }' newline]);
    else
        fwrite(fid,['  vector[] prep_y(vector[] r_p, vector[] rna,vector[] v_x,' newline...
            '                  int[,] idx_g,int num_g,int num_rc){' newline...
            '    vector[idx_g[num_g,2]] y[num_rc];' newline newline...
            '    for(g in 1:num_g){' newline...
            '      for(r in 1:num_rc){' newline...
            '        y[r][idx_g[g,1]:idx_g[g,2]] = v_x[r][idx_g[g,1]:idx_g[g,2]] ./ (1+r_p[g][r]);' newline...
            '      }' newline...
            '    }' newline]);
    end
    fwrite(fid,['    return y;' newline...
        '  }' newline newline]);
    
end

function prep_prep_r_p_all(fid,num_inferred_enz)
   
    if num_inferred_enz==1
        fwrite(fid,['  vector[] prep_r_p_all(vector[] r_p,vector r_p_tmp,'...
            'int num_rc,int num_g,int num_p,int idx_p,int[] idx_p_,',...
            'int[,] idx_g,vector[] rna){' newline...
            '    vector[num_rc] r_p_all[num_g];' newline...
            '    real sum_r = 0.0;' newline newline...
            '    for(g in 1:(num_g-1)){' newline...
            '      r_p_all[g] = r_p[g];' newline...
            '      sum_r += r_p[g][idx_p]*sum(rna[idx_p][idx_g[g,1]:idx_g[g,2]]);' newline...
            '    }' newline newline...
            '    r_p_all[num_g][idx_p_] = r_p_tmp;' newline...
            '    r_p_all[num_g][idx_p] = -sum_r / sum( rna[idx_p][idx_g[num_g,1]:idx_g[num_g,2]] );' newline...
            '    return r_p_all;' newline '  }' newline newline]); 
    elseif num_inferred_enz>1   
        fwrite(fid,['  vector[] prep_r_p_all(vector[] r_p,vector r_p_tmp,'...
            'int num_rc,int num_g,int num_p,int[] idx_p,int[] idx_p_,',...
            'int[,] idx_g,vector[] rna){' newline...
            '    vector[num_rc] r_p_all[num_g];' newline...
            '    real sum_r[num_p] = rep_array(0.0,num_p);' newline newline...
            '    for(g in 1:(num_g-1)){' newline...
            '      r_p_all[g] = r_p[g];' newline...
            '      for(p in 1:num_p){' newline...
            '        sum_r[p] += r_p[g][idx_p[p]]*sum(rna[idx_p[p]][idx_g[g,1]:idx_g[g,2]]);' newline...
            '      }' newline...
            '    }' newline newline...
            '    r_p_all[num_g][idx_p_] = r_p_tmp;' newline...
            '    for(p in 1:num_p){' newline...
            '      r_p_all[num_g][idx_p[p]] = -sum_r[p] / sum( rna[idx_p[p]][idx_g[num_g,1]:idx_g[num_g,2]] );' newline...
            '    }' newline...
            '    return r_p_all;' newline '  }' newline newline]); 
    end

end

function prep_calc_mu(fid)
    
    fwrite(fid,['  vector calc_mu(vector mu_vi,matrix Nu,int[] idx_calc,int num_r){' newline...
        '    vector[num_r] mu_v = Nu*(mu_vi);' newline...
        '    return mu_v[idx_calc];' newline...
        '  }' newline newline]);
end

function prep_calc_Sigma2(fid)
   
    fwrite(fid,['  matrix calc_Sigma2(vector mu_vi,matrix Nu,matrix Ne,matrix Sp,matrix Sm,real c_v,real c_e,int num_r,int num_m,int num_ri,int num_mc,int[] idx_calc){' newline...
        '    vector[num_ri] diag_mu_vi;' newline...
        '    vector[num_r] mu_v;' newline...
        '    vector[num_mc] dxdt;' newline...
        '    vector[num_mc] sigma_e;' newline...
        '    matrix[num_r,num_r] Sigma_tmp;' newline...
        '    for(r in 1:num_ri){' newline...
        '      diag_mu_vi[r] = (c_v*mu_vi[r])^2;' newline...
        '    }' newline...
        '    mu_v = Nu*mu_vi;' newline...
        '    dxdt = (fabs(Sp*mu_v)+fabs(Sm*mu_v))./2;' newline...
        '    for(m in 1:num_mc){' newline...
        '      sigma_e[m] = (c_e*dxdt[m])^2;' newline...
        '    }' newline...
        '    Sigma_tmp= Nu*(diag_matrix(diag_mu_vi))*Nu''''+ Ne*diag_matrix(sigma_e)*Ne'''';' newline...
        '    return Sigma_tmp[idx_calc,idx_calc];' newline...
        '  }' newline newline]);
    
end

function prep_calc_log_prior(fid)
   
    fwrite(fid,['  real calc_log_prior(vector mu_vi,matrix Nu,matrix Ne,matrix Sp,matrix Sm,real c_v,real c_e,int num_r,int num_m,int num_ri,int num_mc,' newline...
        '                      int[] idx_calc,int num_rc, vector v){' newline...
        '   matrix[num_rc,num_rc] Sigma_v;' newline...
        '   vector[num_rc] mu_v;' newline...
        '   real target_prior;' newline...
        '   mu_v = calc_mu(mu_vi,Nu,idx_calc,num_r);' newline...
        '   Sigma_v = calc_Sigma2(mu_vi,Nu,Ne,Sp,Sm,c_v,c_e,num_r,num_m,num_ri,num_mc,idx_calc);' newline...
        '   target_prior = multi_normal_lpdf(v | mu_v, Sigma_v);' newline...
        '   return target_prior;' newline...
        ' }' newline newline]);
    
end

function calc_prep_mean_v(fid)
   
    fwrite(fid,['  vector prep_mean_v(vector mu_vi_wt_tmp,vector[] mu_vi_g,' newline...
        '                     int num_r,int num_ri,int num_rc,int num_g,' newline...
        '                     matrix Nu,int[] idx_calc,int[,] idx_g){' newline...
        '    vector[num_rc] mean_v;' newline...
        '    vector[num_ri] mu_vi_ref;' newline...
        '    vector[num_rc] mu_v[num_g];' newline...
        '    real sum_v[num_rc] = rep_array(0.0,num_rc);' newline newline...
        '    // mu_vi for reference group(WT)' newline...
        '    mu_vi_ref = prep_mu_vi_ref(mu_vi_wt_tmp,num_ri,Nu);' newline...
        '    mu_v[1] = calc_mu(mu_vi_ref,Nu,idx_calc,num_r);' newline...
        '    for(g in 2:num_g){' newline...
        '      mu_v[g] = calc_mu(mu_vi_g[g-1],Nu,idx_calc,num_r);' newline...
        '    }' newline...
        '    for(g in 1:num_g){' newline...
        '      for(r in 1:num_rc){' newline...
        '        sum_v[r] += mu_v[g][r]*(idx_g[g,2]-idx_g[g,1]+1);' newline...
        '      }' newline...
        '    }' newline...
        '    for(r in 1:num_rc){' newline...
        '        mean_v[r] = sum_v[r]/idx_g[num_g,2];' newline...
        '    }' newline...
        '    return to_vector(mean_v);' newline...
        '  }' newline newline]);
    
end
